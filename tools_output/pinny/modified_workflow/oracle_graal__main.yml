name: GraalVM Gate
on:
push:
branches:
- 'release/**'
paths-ignore:
- '.devcontainer/**'
- '.github/workflows/quarkus.yml'
- '**.md'
- '**.jsonnet'
- '**.libjsonnet'
pull_request:
paths-ignore:
- '.devcontainer/**'
- '.github/workflows/quarkus.yml'
- '**.md'
- '**.jsonnet'
- '**.libjsonnet'
schedule:
- cron: '30 0 * * 1'
# Enable manual dispatch of the workflow
# see https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow
workflow_dispatch:
# The following aims to reduce CI CPU cycles by:
# 1. Cancelling any previous builds of this PR when pushing new changes to it
# 2. Cancelling any previous builds of a branch when pushing new changes to it in a fork
# 3. Cancelling any pending builds, but not active ones, when pushing to a branch in the main
#    repository. This prevents us from constantly cancelling CI runs, while being able to skip
#    intermediate builds. E.g., if we perform two pushes the first one will start a CI job and
#    the second one will add another one to the queue; if we perform a third push while the
#    first CI job is still running the previously queued CI job (for the second push) will be
#    cancelled and a new CI job will be queued for the latest (third) push.
concurrency:
group: "workflow = ${{ github.workflow }}, ref = ${{ github.event.ref }}, pr = ${{ github.event.pull_request.id }}"
cancel-in-progress: ${{ github.event_name == 'pull_request' || github.repository != 'oracle/graal' }}
env:
JAVA_HOME: ${{ github.workspace }}/jdk
TOOLS_JAVA_HOME_LOCATION: ${{ github.workspace }}/tools-jdk
LANG: en_US.UTF-8
MX_GIT_CACHE: refcache
MX_PATH: ${{ github.workspace }}/mx
MX_PYTHON: python3.8
# Enforce experimental option checking in CI (GR-47922)
NATIVE_IMAGE_EXPERIMENTAL_OPTIONS_ARE_FATAL: "true"
permissions:
contents: read # to fetch code (actions/checkout)
jobs:
build-graalvm-linux:
name: /${{ matrix.env.PRIMARY }} ${{ matrix.env.GATE_TAGS }} JDK${{ matrix.env.JDK_VERSION }}
runs-on: ${{ matrix.os || 'ubuntu-22.04' }}
timeout-minutes: 60
strategy:
fail-fast: false
matrix:
include:
# /compiler
- env:
JDK_VERSION: "latest"
TOOLS_JDK_VERSION: "21"
GATE_TAGS: "style,fullbuild,test"
PRIMARY: "compiler"
- env:
JDK_VERSION: "latest"
GATE_TAGS: "build,bootstraplite"
PRIMARY: "compiler"
# /espresso
- env:
JDK_VERSION: "latest"
TOOLS_JDK_VERSION: "21"
GATE_TAGS: "style,fullbuild"
PRIMARY: "espresso"
# /substratevm
- env:
JDK_VERSION: "latest"
TOOLS_JDK_VERSION: "21"
GATE_TAGS: "style,fullbuild"
PRIMARY: "substratevm"
- env:
JDK_VERSION: "latest"
GATE_TAGS: "build,helloworld,native_unittests"
PRIMARY: "substratevm"
PIP_PACKAGES: "jsonschema==4.6.1"
- os: ubuntu-24.04
env:
JDK_VERSION: "latest"
GATE_TAGS: "build,debuginfotest"
PRIMARY: "substratevm"
- env:
JDK_VERSION: "latest"
GATE_TAGS: "hellomodule"
PRIMARY: "substratevm"
# /sulong
- env:
JDK_VERSION: "21"
GATE_TAGS: "style,fullbuild,sulongBasic"
PRIMARY: "sulong"
# /truffle
- env:
JDK_VERSION: "21"
GATE_TAGS: "style,fullbuild,fulltest"
PRIMARY: "truffle"
# /vm
- env:
JDK_VERSION: "latest"
GATE_TAGS: "build,sulong"
GATE_OPTS: "--no-warning-as-error"
PRIMARY: "vm"
DYNAMIC_IMPORTS: "/sulong,/substratevm"
NATIVE_IMAGES: "graalvm-native-binutil,graalvm-native-clang,graalvm-native-clang-cl,graalvm-native-clang++,graalvm-native-ld,lib:llvmvm"
DISABLE_POLYGLOT: true
DISABLE_LIBPOLYGLOT: true
- env:
JDK_VERSION: "latest"
GATE_TAGS: "build"
GATE_OPTS: "--no-warning-as-error"
PRIMARY: "vm"
DYNAMIC_IMPORTS: "/tools,/substratevm,/sulong"
NATIVE_IMAGES: "lib:jvmcicompiler,native-image,lib:native-image-agent,lib:native-image-diagnostics-agent,polyglot"
WITHOUT_VCS: true
env:
JDT: builtin # Compile with ECJ (and javac) as part of gate runs tagged with 'fullbuild'
MX_RUNS_DEBUG: ${{ contains(matrix.env.GATE_TAGS, 'debug') || matrix.env.GATE_TAGS == '' }}
MX_RUNS_STYLE: ${{ contains(matrix.env.GATE_TAGS, 'style') || matrix.env.GATE_TAGS == '' }}
steps:
- name: Checkout oracle/graal
uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # actions/checkout@v4 | v4.2.2
with:
ref: ${{ github.ref }} # Lock ref to current branch to avoid fetching others
fetch-depth: "${{ env.MX_RUNS_STYLE && '0' || '1' }}" # The style gate needs the full commit history for checking copyright years
- name: Determine mx version
run: echo "MX_VERSION=$(jq -r '.mx_version' common.json)" >> ${GITHUB_ENV}
- name: Checkout graalvm/mx
uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # actions/checkout@v4 | v4.2.2
with:
repository: graalvm/mx.git
ref: ${{ env.MX_VERSION }}
path: ${{ env.MX_PATH }}
- name: Set up Python
uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # actions/setup-python@v5 | v5.6.0
with:
python-version: '3.8'
- name: Fetch LabsJDK
env: ${{ matrix.env }}
run: |
mkdir jdk-dl
${MX_PATH}/mx --java-home= fetch-jdk --jdk-id labsjdk-ce-${JDK_VERSION} --to jdk-dl --alias ${JAVA_HOME}
- name: Fetch Tools JDK
env: ${{ matrix.env }}
if: ${{ matrix.env.TOOLS_JDK_VERSION != '' }}
run: |
${MX_PATH}/mx --java-home= fetch-jdk --jdk-id labsjdk-ce-${TOOLS_JDK_VERSION} --to jdk-dl --alias ${TOOLS_JAVA_HOME_LOCATION}
- name: Update dependency cache
if: ${{ env.MX_RUNS_DEBUG == 'true' || env.MX_RUNS_STYLE == 'true' }}
run: sudo apt update
- name: Install debug dependencies
if: ${{ env.MX_RUNS_DEBUG == 'true' }}
run: sudo apt install gdb
- name: Install style dependencies
if: ${{ env.MX_RUNS_STYLE == 'true' }}
run: |
sudo apt install python3-pip python-setuptools
sudo pip install $(jq -r '[.pip | to_entries[] | join("")] | join(" ")' common.json)
- name: Install additional pip packages
if: ${{ matrix.env.PIP_PACKAGES != '' }}
run: ${MX_PYTHON} -m pip install ${{ matrix.env.PIP_PACKAGES }}
- name: Download Eclipse
if: ${{ env.MX_RUNS_STYLE == 'true' }}
run: |
ECLIPSE_TAR=eclipse.tar.gz
ECLIPSE_ORG_VERSION=$(jq -r '.eclipse.short_version' common.json)
ECLIPSE_ORG_TIMESTAMP=$(jq -r '.eclipse.timestamp' common.json)
wget --no-verbose https://archive.eclipse.org/eclipse/downloads/drops4/R-${ECLIPSE_ORG_VERSION}-${ECLIPSE_ORG_TIMESTAMP}/eclipse-SDK-${ECLIPSE_ORG_VERSION}-linux-gtk-x86_64.tar.gz -O $ECLIPSE_TAR
tar -xzf ${ECLIPSE_TAR}
echo "ECLIPSE_EXE=${PWD}/eclipse/eclipse" >> $GITHUB_ENV
- name: Remove .git directory
if: ${{ matrix.env.WITHOUT_VCS }}
run: rm -rf .git
- name: Build GraalVM and run gate with tags
env: ${{ matrix.env }}
run: ${MX_PATH}/mx --primary-suite-path ${PRIMARY} --java-home=${JAVA_HOME} --tools-java-home=${{ matrix.env.TOOLS_JDK_VERSION != '' && env.TOOLS_JAVA_HOME_LOCATION || '' }} gate --strict-mode ${{ matrix.env.GATE_OPTS }} --tags ${GATE_TAGS}
if: ${{ matrix.env.GATE_TAGS != '' }}
- name: Build GraalVM and run gate without tags
env: ${{ matrix.env }}
run: ${MX_PATH}/mx --primary-suite-path ${PRIMARY} --java-home=${JAVA_HOME} gate --strict-mode ${{ matrix.env.GATE_OPTS }}
if: ${{ matrix.env.GATE_TAGS == '' }}
build-graalvm-windows:
name: /substratevm on Windows
runs-on: windows-2022
timeout-minutes: 60
env:
MX_PYTHON: 'python'
PYTHONIOENCODING: 'utf-8'
steps:
- name: Checkout oracle/graal
uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # actions/checkout@v4 | v4.2.2
with:
ref: ${{ github.ref }} # Lock ref to current branch to avoid fetching others
- name: Determine mx version
shell: bash
run: echo "MX_VERSION=$(jq -r '.mx_version' common.json)" >> ${GITHUB_ENV}
- name: Checkout graalvm/mx
uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # actions/checkout@v4 | v4.2.2
with:
repository: graalvm/mx.git
ref: ${{ env.MX_VERSION }}
path: ${{ env.MX_PATH }}
- name: Set up Python
uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # actions/setup-python@v5 | v5.6.0
with:
python-version: '3.8'
- name: Fetch LabsJDK
shell: bash
run: |
mkdir jdk-dl
${MX_PATH}/mx --java-home= fetch-jdk --jdk-id labsjdk-ce-latest --to jdk-dl --alias ${JAVA_HOME}
- name: Build GraalVM via cmd.exe
shell: cmd
run: |
call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
call ${{ env.MX_PATH }}\mx.cmd -p substratevm --native-images=native-image --components="Native Image" build
call ${{ env.MX_PATH }}\mx.cmd -p substratevm --native-images=native-image --components="Native Image" graalvm-home > graalvm-home-with-forward-slashes.txt
set /p GRAALVM_HOME=<graalvm-home-with-forward-slashes.txt
setlocal enabledelayedexpansion
set "GRAALVM_HOME=%GRAALVM_HOME:/=\%"
echo %GRAALVM_HOME%\bin>>%GITHUB_PATH%
echo GRAALVM_HOME=%GRAALVM_HOME%>>%GITHUB_ENV%
- name: Test GraalVM
run: |
native-image --version
native-image -m jdk.httpserver