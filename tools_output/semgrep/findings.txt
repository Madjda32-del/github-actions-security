                     
                     
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 105 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                                             
  [36m[22m[24m  .github/workflows/axios_axios__labeler.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           26‚îÜ run: |
           27‚îÜ     echo "Using PR number: ${{ github.event.inputs.prs || github.event.pull_request.number
               }}"                                                                                       
           28‚îÜ     echo "pr=${{ github.event.inputs.prs || github.event.pull_request.number }}" >>
               $GITHUB_OUTPUT                                                                     
           29‚îÜ
                                                            
  [36m[22m[24m  .github/workflows/axios_axios__notify.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           51‚îÜ run: node ./bin/actions/notify_published.js --tag ${{ github.event.inputs.tag ||
               github.event.release.tag_name }}                                                
                                                             
  [36m[22m[24m  .github/workflows/axios_axios__npm-tag.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           28‚îÜ run: npm dist-tag add axios@${{ github.event.inputs.version }} ${{ github.event.inputs.tag
               }}                                                                                        
                                                             
  [36m[22m[24m  .github/workflows/axios_axios__publish.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           84‚îÜ run: node ./bin/actions/notify_published.js --tag ${{ github.event.inputs.tag ||
               github.event.release.tag_name }}                                                
                                                                   
  [36m[22m[24m  .github/workflows/denoland_deno__npm_publish.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           45‚îÜ run: ./tools/release/npm/build.ts ${{ github.event.inputs.version }} --publish
                                                                          
  [36m[22m[24m  .github/workflows/denoland_deno__promote_to_release.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           41‚îÜ run: |
           42‚îÜ   $CANARY_URL="https://dl.deno.land/canary/${{github.event.inputs.commitHash}}"
           43‚îÜ   Invoke-WebRequest -Uri "$CANARY_URL/deno-x86_64-pc-windows-msvc.zip" -OutFile "deno-
               windows.zip"                                                                          
           44‚îÜ   Invoke-WebRequest -Uri "$CANARY_URL/denort-x86_64-pc-windows-msvc.zip" -OutFile "denort-
               windows.zip"                                                                              
           45‚îÜ   Expand-Archive -Path "deno-windows.zip" -DestinationPath "."
           46‚îÜ   Expand-Archive -Path "denort-windows.zip" -DestinationPath "."
           47‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
           50‚îÜ run: |
           51‚îÜ   deno install -A -n patchver https://deno.land/x/patchver@0.2.0/cli.ts
           52‚îÜ   $CHANNEL="${{github.event.inputs.releaseKind}}"
           53‚îÜ   # Patch deno.exe
           54‚îÜ   Move-Item -Path "deno.exe" -Destination "deno_original.exe"
           55‚îÜ   patchver "deno_original.exe" "deno.exe" $CHANNEL
           56‚îÜ   # Patch denort.exe
           57‚îÜ   Move-Item -Path "denort.exe" -Destination "denort_original.exe"
           58‚îÜ   patchver "denort_original.exe" "denort.exe" $CHANNEL
           59‚îÜ
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
           93‚îÜ run: |
           94‚îÜ   $SignTool = Get-ChildItem -Path "C:\Program Files*\Windows Kits\*\bin\*\x64\signtool.exe"
               -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1                            
           95‚îÜ   $SignToolPath = $SignTool.FullName
           96‚îÜ   & $SignToolPath verify /pa /v "deno-x86_64-pc-windows-
               msvc-${{github.event.inputs.releaseKind}}.exe"          
           97‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
           99‚îÜ run: |
          100‚îÜ   Compress-Archive -Path "deno-x86_64-pc-windows-                                       
               msvc-${{github.event.inputs.releaseKind}}.exe" -DestinationPath "deno-x86_64-pc-windows-
               msvc.zip" -Force                                                                        
          101‚îÜ   Compress-Archive -Path "denort-x86_64-pc-windows-                                       
               msvc-${{github.event.inputs.releaseKind}}.exe" -DestinationPath "denort-x86_64-pc-windows-
               msvc.zip" -Force                                                                          
          102‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
          151‚îÜ run: |
          152‚îÜ   deno run -A ./tools/release/promote_to_release.ts ${{github.event.inputs.releaseKind}}
               ${{github.event.inputs.commitHash}}                                                     
          153‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
          161‚îÜ run: |
          162‚îÜ   # Unzip a binary to get the version
          163‚îÜ   unzip -o deno-x86_64-apple-darwin.zip
          164‚îÜ   DENO_VERSION=$(./deno -V | cut -d ' ' -f 2 | cut -d '+' -f 1)
          165‚îÜ   echo "v${DENO_VERSION}" > release-${{github.event.inputs.releaseKind}}-latest.txt
          166‚îÜ   rm -f ./deno
          167‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
          169‚îÜ run: |
          170‚îÜ   gsutil -h "Cache-Control: public, max-age=3600" cp ./*.zip                             
               gs://dl.deno.land/release/$(cat release-${{github.event.inputs.releaseKind}}-latest.txt)/
          171‚îÜ   gsutil -h "Cache-Control: no-cache" cp                                 
               release-${{github.event.inputs.releaseKind}}-latest.txt                  
               gs://dl.deno.land/release-${{github.event.inputs.releaseKind}}-latest.txt
                                                                     
  [36m[22m[24m  .github/workflows/denoland_deno__start_release.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           45‚îÜ run: ./tools/release/00_start_release.ts --${{github.event.inputs.releaseKind}}
                                                                    
  [36m[22m[24m  .github/workflows/denoland_deno__version_bump.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           48‚îÜ run: |
           49‚îÜ   git remote add upstream https://github.com/denoland/deno
           50‚îÜ   ./tools/release/01_bump_crate_versions.ts --${{github.event.inputs.releaseKind}}
           51‚îÜ
                                                                 
  [36m[22m[24m  .github/workflows/electron_electron__build.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           65‚îÜ run: |
           66‚îÜ   if [ -z "${{ inputs.build-image-sha }}" ]; then
           67‚îÜ     echo "build-image-sha=424eedbf277ad9749ffa9219068aa72ed4a5e373" >> "$GITHUB_OUTPUT"
           68‚îÜ   else
           69‚îÜ     echo "build-image-sha=${{ inputs.build-image-sha }}" >> "$GITHUB_OUTPUT"
           70‚îÜ   fi
           71‚îÜ   echo "docs-only=${{ steps.filter.outputs.docs == 'true' && steps.filter.outputs.src ==
               'false' }}" >> "$GITHUB_OUTPUT"                                                         
           72‚îÜ
                                                                                           
  [36m[22m[24m  .github/workflows/electron_electron__pipeline-segment-electron-build.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
          117‚îÜ run: |
          118‚îÜ   if [ "${{ inputs.target-arch  }}" = "arm" ]; then
          119‚îÜ     if [ "${{ inputs.is-release  }}" = true ]; then
          120‚îÜ       GN_EXTRA_ARGS='target_cpu="arm" build_tflite_with_xnnpack=false symbol_level=1'
          121‚îÜ     else
          122‚îÜ       GN_EXTRA_ARGS='target_cpu="arm" build_tflite_with_xnnpack=false'
          123‚îÜ     fi
          124‚îÜ   elif [ "${{ inputs.target-arch }}" = "arm64" ]; then
          125‚îÜ     GN_EXTRA_ARGS='target_cpu="arm64" fatal_linker_warnings=false
               enable_linux_installer=false'                                    
          126‚îÜ   elif [ "${{ inputs.is-asan }}" = true ]; then
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
          162‚îÜ run: |
          163‚îÜ   e init -f --root=$(pwd) --out=Default ${{ inputs.gn-build-type }} --import ${{ inputs.gn-
               build-type }} --target-cpu ${{ inputs.target-arch }}                                       
            ‚ãÆ‚îÜ----------------------------------------
          174‚îÜ run: |
          175‚îÜ   echo "NUMBER_OF_NINJA_PROCESSES=${{ inputs.target-platform != 'macos' && '300' || '200'
               }}" >> $GITHUB_ENV                                                                       
                                                                                              
  [36m[22m[24m  .github/workflows/electron_electron__pipeline-segment-electron-gn-check.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           94‚îÜ run: |
           95‚îÜ   echo "solutions=[{'name':'src/electron','url':None,'deps_file':'DEPS','custom_vars':{'pro
               cess_deps':False},'managed':False}]" > tmpgclient                                          
           96‚îÜ   if [ "${{ inputs.target-platform }}" = "win" ]; then
           97‚îÜ     echo "solutions=[{'name':'src/electron','url':None,'deps_file':'DEPS','custom_vars':{'p
               rocess_deps':False,'install_sysroot':False,'checkout_win':True},'managed':False}]" >       
               tmpgclient                                                                                 
           98‚îÜ     echo "target_os=['win']" >> tmpgclient
           99‚îÜ   fi
          100‚îÜ   e d gclient runhooks --gclientfile=tmpgclient
          101‚îÜ
          102‚îÜ   # Fix VS Toolchain
          103‚îÜ   if [ "${{ inputs.target-platform }}" = "win" ]; then
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
          126‚îÜ run: |
          127‚îÜ   for target_cpu in ${{ inputs.target-archs }}
          128‚îÜ   do
          129‚îÜ     e init -f --root=$(pwd) --out=Default ${{ inputs.gn-build-type }} --import ${{
               inputs.gn-build-type }} --target-cpu $target_cpu                                  
          130‚îÜ     cd src
          131‚îÜ     export GN_EXTRA_ARGS="target_cpu=\"$target_cpu\""
          132‚îÜ     if [ "${{ inputs.target-platform }}" = "linux" ]; then
          133‚îÜ       if [ "$target_cpu" = "arm" ]; then
          134‚îÜ         export GN_EXTRA_ARGS="$GN_EXTRA_ARGS build_tflite_with_xnnpack=false"
          135‚îÜ       elif [ "$target_cpu" = "arm64" ]; then
             [hid 19 additional lines, adjust with --max-lines-per-finding] 
                                                                                          
  [36m[22m[24m  .github/workflows/electron_electron__pipeline-segment-electron-test.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
          147‚îÜ run: |
          148‚îÜ   echo "ARTIFACT_KEY=${{ matrix.build-type }}_${{ inputs.target-arch }}_asan" >>
               $GITHUB_ENV                                                                     
          149‚îÜ   echo "DISABLE_CRASH_REPORTER_TESTS=true" >> $GITHUB_ENV
          150‚îÜ   echo "IS_ASAN=true" >> $GITHUB_ENV
            ‚ãÆ‚îÜ----------------------------------------
          198‚îÜ run: |
          199‚îÜ   cd src/electron
          200‚îÜ   export ELECTRON_TEST_RESULTS_DIR=`pwd`/junit
          201‚îÜ   # Get which tests are on this shard
          202‚îÜ   tests_files=$(node script/split-tests ${{ matrix.shard }} ${{ inputs.target-platform ==
               'linux' && 3 || 2 }})                                                                    
          203‚îÜ
          204‚îÜ   # Run tests
          205‚îÜ   if [ "${{ inputs.target-platform }}" != "linux" ]; then
          206‚îÜ     echo "About to start tests"
          207‚îÜ     if [ "${{ inputs.target-platform }}" = "win" ]; then
             [hid 29 additional lines, adjust with --max-lines-per-finding] 
                                                                                          
  [36m[22m[24m  .github/workflows/electron_electron__pipeline-segment-node-nan-test.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           59‚îÜ run: |
           60‚îÜ   e init -f --root=$(pwd) --out=Default ${{ inputs.gn-build-type }} --import ${{ inputs.gn-
               build-type }} --target-cpu ${{ inputs.target-arch }}                                       
            ‚ãÆ‚îÜ----------------------------------------
          113‚îÜ run: |
          114‚îÜ   e init -f --root=$(pwd) --out=Default ${{ inputs.gn-build-type }}
                                                                            
  [36m[22m[24m  .github/workflows/facebook_create-react-app__e2e-base.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           35‚îÜ run: ${{ inputs.testScript }}
                                                                              
  [36m[22m[24m  .github/workflows/facebook_react-native__create-release.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           43‚îÜ run: |
           44‚îÜ   TAG="v${{ inputs.version }}"
           45‚îÜ   TAG_EXISTS=$(git tag -l "$TAG")
           46‚îÜ   if [[ -n "$TAG_EXISTS" ]]; then
           47‚îÜ     echo "Version tag already exists!"
           48‚îÜ     echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
           49‚îÜ   fi
                                                                              
  [36m[22m[24m  .github/workflows/facebook_react-native__retry-workflow.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           17‚îÜ run: |
           18‚îÜ     gh run watch ${{ inputs.run_id }} > /dev/null 2>&1
           19‚îÜ     gh run rerun ${{ inputs.run_id }} --failed
                                                                        
  [36m[22m[24m  .github/workflows/facebook_react-native__test-all.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           26‚îÜ run: |
           27‚îÜ   if [[ $EVENT_NAME == "schedule" ]]; then
           28‚îÜ     echo "Setting release type to nightly"
           29‚îÜ     echo "RELEASE_TYPE=nightly" >> $GITHUB_OUTPUT
           30‚îÜ   elif [[ $EVENT_NAME == "push" && $REF == refs/tags/v* ]]; then
           31‚îÜ     echo "Setting release type to release"
           32‚îÜ     echo "RELEASE_TYPE=release" >> $GITHUB_OUTPUT
           33‚îÜ   else
           34‚îÜ     echo "Setting release type to dry-run"
           35‚îÜ     echo "RELEASE_TYPE=dry-run" >> $GITHUB_OUTPUT
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
                                                                             
  [36m[22m[24m  .github/workflows/facebook_react__compiler_prereleases.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           59‚îÜ run: |
           60‚îÜ   cp ./scripts/release/ci-npmrc ~/.npmrc
           61‚îÜ   scripts/release/publish.js --frfr --ci --versionName=${{ inputs.version_name }} --tag=${{
               inputs.dist_tag }} ${{ inputs.tag_version && format('--tagVersion={0}', inputs.tag_version)
               || '' }}                                                                                   
                                                                                  
  [36m[22m[24m  .github/workflows/facebook_react__devtools_regression_tests.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           47‚îÜ run: |
           48‚îÜ   git fetch origin main
           49‚îÜ   GH_TOKEN=${{ github.token }} scripts/release/download-experimental-build.js --commit=${{
               inputs.commit_sha || '$(git rev-parse origin/main)' }}                                    
                                                                                 
  [36m[22m[24m  .github/workflows/facebook_react__runtime_commit_artifacts.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           54‚îÜ run: |
           55‚îÜ   GH_TOKEN=${{ github.token }} scripts/release/download-experimental-build.js --commit=${{
               inputs.commit_sha || github.event.workflow_run.head_sha || github.sha }}                  
            ‚ãÆ‚îÜ----------------------------------------
          181‚îÜ run: |
          182‚îÜ   echo ${{ inputs.commit_sha || github.event.workflow_run.head_sha || github.sha }} >>
               ./compiled/facebook-www/REVISION                                                      
          183‚îÜ   cp ./compiled/facebook-www/REVISION ./compiled/facebook-www/REVISION_TRANSFORMS
          184‚îÜ   echo ${{ inputs.commit_sha || github.event.workflow_run.head_sha || github.sha }} >>  
               ./compiled-rn/facebook-fbsource/xplat/js/react-native-github/Libraries/Renderer/REVISION
            ‚ãÆ‚îÜ----------------------------------------
          284‚îÜ run: |
          285‚îÜ   git fetch origin --quiet
          286‚îÜ   git show ${{ inputs.commit_sha || github.event.workflow_run.head_sha || github.sha }}
               --no-patch --pretty=format:"%B"                                                        
            ‚ãÆ‚îÜ----------------------------------------
          289‚îÜ run: |
          290‚îÜ   git config --global user.email "${{ format('{0}@users.noreply.github.com',
               github.triggering_actor) }}"                                                
          291‚îÜ   git config --global user.name "${{ github.triggering_actor }}"
          292‚îÜ
          293‚îÜ   git fetch origin --quiet
          294‚îÜ   git commit -m "$(git show ${{ inputs.commit_sha || github.event.workflow_run.head_sha ||
               github.sha }} --no-patch --pretty=format:'%B%n%nDiffTrain build for [${{ inputs.commit_sha
               || github.event.workflow_run.head_sha || github.sha                                       
               }}](https://github.com/facebook/react/commit/${{ inputs.commit_sha ||                     
               github.event.workflow_run.head_sha || github.sha}})')" || echo "No changes to commit"     
            ‚ãÆ‚îÜ----------------------------------------
          458‚îÜ run: |
          459‚îÜ   git fetch origin --quiet
          460‚îÜ   git show ${{ inputs.commit_sha || github.event.workflow_run.head_sha || github.sha }}
               --no-patch --pretty=format:"%B"                                                        
            ‚ãÆ‚îÜ----------------------------------------
          463‚îÜ run: |
          464‚îÜ   git config --global user.email "${{ format('{0}@users.noreply.github.com',
               github.triggering_actor) }}"                                                
          465‚îÜ   git config --global user.name "${{ github.triggering_actor }}"
          466‚îÜ
          467‚îÜ   git fetch origin --quiet
          468‚îÜ   git commit -m "$(git show ${{ inputs.commit_sha || github.event.workflow_run.head_sha ||
               github.sha }} --no-patch --pretty=format:'%B%n%nDiffTrain build for [${{ inputs.commit_sha
               || github.event.workflow_run.head_sha || github.sha                                       
               }}](https://github.com/facebook/react/commit/${{ inputs.commit_sha ||                     
               github.event.workflow_run.head_sha || github.sha}})')" || echo "No changes to commit"     
                                                                            
  [36m[22m[24m  .github/workflows/facebook_react__runtime_prereleases.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           76‚îÜ - run: |
           77‚îÜ     GH_TOKEN=${{ secrets.GH_TOKEN }} scripts/release/prepare-release-from-ci.js --skipTests
               -r ${{ inputs.release_channel }} --commit=${{ inputs.commit_sha }}                         
            ‚ãÆ‚îÜ----------------------------------------
           82‚îÜ run: |
           83‚îÜ   scripts/release/publish.js \
           84‚îÜ     --ci \
           85‚îÜ     --skipTests \
           86‚îÜ     --tags=${{ inputs.dist_tag }} \
           87‚îÜ     --onlyPackages=${{ inputs.only_packages }} ${{ (inputs.dry && '') || '\'}}
           88‚îÜ     ${{ inputs.dry && '--dry' || '' }}
            ‚ãÆ‚îÜ----------------------------------------
           91‚îÜ run: |
           92‚îÜ   scripts/release/publish.js \
           93‚îÜ     --ci \
           94‚îÜ     --skipTests \
           95‚îÜ     --tags=${{ inputs.dist_tag }} \
           96‚îÜ     --skipPackages=${{ inputs.skip_packages }} ${{ (inputs.dry && '') || '\'}}
           97‚îÜ     ${{ inputs.dry && '--dry' || '' }}
            ‚ãÆ‚îÜ----------------------------------------
          100‚îÜ run: |
          101‚îÜ   scripts/release/publish.js \
          102‚îÜ     --ci \
          103‚îÜ     --tags=${{ inputs.dist_tag }} ${{ (inputs.dry && '') || '\'}}
          104‚îÜ     ${{ inputs.dry && '--dry' || '' }}
                                                                                         
  [36m[22m[24m  .github/workflows/facebook_react__runtime_releases_from_npm_manual.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           87‚îÜ run: |
           88‚îÜ   scripts/release/prepare-release-from-npm.js \
           89‚îÜ     --ci \
           90‚îÜ     --skipTests \
           91‚îÜ     --version=${{ inputs.version_to_promote }} \
           92‚îÜ     --publishVersion=${{ inputs.version_to_publish }} \
           93‚îÜ     --onlyPackages=${{ inputs.only_packages }}
            ‚ãÆ‚îÜ----------------------------------------
           96‚îÜ run: |
           97‚îÜ   scripts/release/prepare-release-from-npm.js \
           98‚îÜ     --ci \
           99‚îÜ     --skipTests \
          100‚îÜ     --version=${{ inputs.version_to_promote }} \
          101‚îÜ     --publishVersion=${{ inputs.version_to_publish }} \
          102‚îÜ     --skipPackages=${{ inputs.skip_packages }}
            ‚ãÆ‚îÜ----------------------------------------
          107‚îÜ run: |
          108‚îÜ   scripts/release/publish.js \
          109‚îÜ     --ci \
          110‚îÜ     --tags=${{ inputs.tags }} \
          111‚îÜ     --publishVersion=${{ inputs.version_to_publish }} \
          112‚îÜ     --onlyPackages=${{ inputs.only_packages }} ${{ (inputs.dry && '') || '\'}}
          113‚îÜ     ${{ inputs.dry && '--dry' || '' }}
            ‚ãÆ‚îÜ----------------------------------------
          116‚îÜ run: |
          117‚îÜ   scripts/release/publish.js \
          118‚îÜ     --ci \
          119‚îÜ     --tags=${{ inputs.tags }} \
          120‚îÜ     --publishVersion=${{ inputs.version_to_publish }} \
          121‚îÜ     --skipPackages=${{ inputs.skip_packages }} ${{ (inputs.dry && '') || '\'}}
          122‚îÜ     ${{ inputs.dry && '--dry' || '' }}
                                                                              
  [36m[22m[24m  .github/workflows/freeCodeCamp_freeCodeCamp__deploy-api.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           27‚îÜ run: |
           28‚îÜ   BRANCH="${{ github.ref_name }}"
           29‚îÜ   echo "Current branch: $BRANCH"
           30‚îÜ   case "$BRANCH" in
           31‚îÜ     "prod-current")
           32‚îÜ       echo "site_tld=org" >> $GITHUB_OUTPUT
           33‚îÜ       echo "tgt_env_short=prd" >> $GITHUB_OUTPUT
           34‚îÜ       echo "tgt_env_long=production" >> $GITHUB_OUTPUT
           35‚îÜ       echo "api_log_lvl=${{ inputs.api_log_lvl || 'info' }}" >> $GITHUB_OUTPUT
           36‚îÜ       ;;
             [hid 8 additional lines, adjust with --max-lines-per-finding] 
                                                                               
  [36m[22m[24m  .github/workflows/freeCodeCamp_freeCodeCamp__docker-docr.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           55‚îÜ run: |
           56‚îÜ   docker build \
           57‚îÜ     --tag registry.digitalocean.com/${{ secrets.DOCR_NAME }}/${{ inputs.site_tld
               }}/learn-${{ inputs.app }}:$tagname \                                           
           58‚îÜ     --tag registry.digitalocean.com/${{ secrets.DOCR_NAME }}/${{ inputs.site_tld
               }}/learn-${{ inputs.app }}:latest \                                             
           59‚îÜ     --file docker/${{ inputs.app }}/Dockerfile .
           60‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
           70‚îÜ run: |
           71‚îÜ   docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/${{ inputs.site_tld
               }}/learn-${{ inputs.app }}:$tagname                                                 
           72‚îÜ   docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/${{ inputs.site_tld
               }}/learn-${{ inputs.app }}:latest                                                   
                                                                                     
  [36m[22m[24m  .github/workflows/huggingface_transformers__check_failed_tests.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           56‚îÜ run: |
           57‚îÜ   if [ -f ci_results_${{ inputs.job }}/new_failures.json ]; then
           58‚îÜ     echo "`ci_results_${{ inputs.job }}/new_failures.json` exists, continue ..."
           59‚îÜ     echo "process=true" >> $GITHUB_ENV
           60‚îÜ   else
           61‚îÜ     echo "`ci_results_${{ inputs.job }}/new_failures.json` doesn't exist, abort."
           62‚îÜ     echo "process=false" >> $GITHUB_ENV
           63‚îÜ   fi
           64‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
          101‚îÜ run: git fetch && git checkout ${{ inputs.start_sha }}
            ‚ãÆ‚îÜ----------------------------------------
          127‚îÜ run: python3 utils/check_bad_commit.py --start_commit ${{ inputs.start_sha }} --end_commit
               ${{ env.END_SHA }} --file ci_results_${{ inputs.job }}/new_failures.json --output_file    
               new_failures_with_bad_commit.json                                                         
            ‚ãÆ‚îÜ----------------------------------------
          139‚îÜ run: |
          140‚îÜ   git checkout ${{ inputs.start_sha }}
          141‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
          173‚îÜ run: |
          174‚îÜ   pip install slack_sdk
          175‚îÜ   echo "title=$(python3 -c 'import sys; sys.path.append("utils"); from                     
               utils.notification_service import job_to_test_map; ci_event = "${{ inputs.ci_event }}"; job
               = "${{ inputs.job }}"; test_name = job_to_test_map[job]; title = f"New failed tests of     
               {ci_event}" + ":" + f" {test_name}"; print(title)')" >> $GITHUB_ENV                        
          176‚îÜ
                                                                             
  [36m[22m[24m  .github/workflows/huggingface_transformers__model_jobs.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           55‚îÜ run: |
           56‚îÜ   echo "${{ inputs.folder_slices }}"
           57‚îÜ   echo "${{ matrix.folders }}"
           58‚îÜ   echo "${{ toJson(fromJson(inputs.folder_slices)[inputs.slice_id]) }}"
           59‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
          107‚îÜ run: |
          108‚îÜ   echo "${{ inputs.machine_type }}"
          109‚îÜ
          110‚îÜ   if [ "${{ inputs.machine_type }}" = "aws-g4dn-4xlarge-cache" ]; then
          111‚îÜ     machine_type=single-gpu
          112‚îÜ   elif [ "${{ inputs.machine_type }}" = "aws-g4dn-12xlarge-cache" ]; then
          113‚îÜ     machine_type=multi-gpu
          114‚îÜ   else
          115‚îÜ     machine_type=${{ inputs.machine_type }}
          116‚îÜ   fi
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
          123‚îÜ run: python3 -m pytest -rsfE -v --make-reports=${{ env.machine_type }}_${{                 
               inputs.report_name_prefix }}_${{ matrix.folders }}_test_reports tests/${{ matrix.folders }}
            ‚ãÆ‚îÜ----------------------------------------
          128‚îÜ run: cat /transformers/reports/${{ env.machine_type }}_${{ inputs.report_name_prefix }}_${{
               matrix.folders }}_test_reports/failures_short.txt                                          
            ‚ãÆ‚îÜ----------------------------------------
          132‚îÜ run: |
          133‚îÜ   mkdir -p /transformers/reports/${{ env.machine_type }}_${{ inputs.report_name_prefix
               }}_${{ matrix.folders }}_test_reports                                                 
          134‚îÜ   echo "hello" > /transformers/reports/${{ env.machine_type }}_${{       
               inputs.report_name_prefix }}_${{ matrix.folders }}_test_reports/hello.txt
          135‚îÜ   echo "${{ env.machine_type }}_${{ inputs.report_name_prefix }}_${{ matrix.folders
               }}_test_reports"                                                                   
          136‚îÜ
                                                                                         
  [36m[22m[24m  .github/workflows/huggingface_transformers__model_jobs_intel_gaudi.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           54‚îÜ run: |
           55‚îÜ   echo "${{ inputs.folder_slices }}"
           56‚îÜ   echo "${{ matrix.folders }}"
           57‚îÜ   echo "${{ toJson(fromJson(inputs.folder_slices)[inputs.slice_id]) }}"
           58‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
           91‚îÜ run: |
           92‚îÜ   if [ "${{ inputs.machine_type }}" = "1gaudi" ]; then
           93‚îÜ     machine_type=single-gpu
           94‚îÜ   elif [ "${{ inputs.machine_type }}" = "2gaudi" ]; then
           95‚îÜ     machine_type=multi-gpu
           96‚îÜ   else
           97‚îÜ     machine_type=${{ inputs.machine_type }}
           98‚îÜ   fi
           99‚îÜ   echo "machine_type=$machine_type" >> $GITHUB_ENV
          100‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
          102‚îÜ run: python3 -m pytest -v --make-reports=${{ env.machine_type }}_${{                       
               inputs.report_name_prefix }}_${{ matrix.folders }}_test_reports tests/${{ matrix.folders }}
            ‚ãÆ‚îÜ----------------------------------------
          107‚îÜ run: cat reports/${{ env.machine_type }}_${{ inputs.report_name_prefix }}_${{
               matrix.folders }}_test_reports/failures_short.txt                            
            ‚ãÆ‚îÜ----------------------------------------
          111‚îÜ run: |
          112‚îÜ   mkdir -p reports/${{ env.machine_type }}_${{ inputs.report_name_prefix }}_${{
               matrix.folders }}_test_reports                                                 
          113‚îÜ   echo "hello" > reports/${{ env.machine_type }}_${{ inputs.report_name_prefix }}_${{
               matrix.folders }}_test_reports/hello.txt                                             
          114‚îÜ   echo "${{ env.machine_type }}_${{ inputs.report_name_prefix }}_${{ matrix.folders
               }}_test_reports"                                                                   
          115‚îÜ
                                                                                        
  [36m[22m[24m  .github/workflows/huggingface_transformers__self-scheduled-caller.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           37‚îÜ run: |
           38‚îÜ   mkdir "setup_values"
           39‚îÜ   echo "${{ inputs.prev_workflow_run_id || env.prev_workflow_run_id }}" >
               "setup_values/prev_workflow_run_id.txt"                                  
           40‚îÜ   echo "${{ inputs.other_workflow_run_id || env.other_workflow_run_id }}" >
               "setup_values/other_workflow_run_id.txt"                                   
           41‚îÜ
                                                                                             
  [36m[22m[24m  .github/workflows/huggingface_transformers__self-scheduled-intel-gaudi.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           56‚îÜ run: |
           57‚îÜ   if [ "${{ inputs.job }}" = "run_models_gpu" ]; then
           58‚îÜ     echo "folder_slices=$(python3 ../utils/split_model_tests.py --num_splits ${{
               env.NUM_SLICES }})" >> $GITHUB_OUTPUT                                           
           59‚îÜ     echo "slice_ids=$(python3 -c 'd = list(range(${{ env.NUM_SLICES }})); print(d)')" >>
               $GITHUB_OUTPUT                                                                          
           60‚îÜ   elif [ "${{ inputs.job }}" = "run_trainer_and_fsdp_gpu" ]; then
           61‚îÜ     echo "folder_slices=[['trainer'], ['fsdp']]" >> $GITHUB_OUTPUT
           62‚îÜ     echo "slice_ids=[0, 1]" >> $GITHUB_OUTPUT
           63‚îÜ   fi
           64‚îÜ
                                                                                 
  [36m[22m[24m  .github/workflows/huggingface_transformers__self-scheduled.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           85‚îÜ run: |
           86‚îÜ   if [ "${{ inputs.job }}" = "run_models_gpu" ]; then
           87‚îÜ     echo "folder_slices=$(python3 ../utils/split_model_tests.py --num_splits ${{
               env.NUM_SLICES }})" >> $GITHUB_OUTPUT                                           
           88‚îÜ     echo "slice_ids=$(python3 -c 'd = list(range(${{ env.NUM_SLICES }})); print(d)')" >>
               $GITHUB_OUTPUT                                                                          
           89‚îÜ     echo "runner_map=$(python3 ../utils/get_runner_map.py)" >> $GITHUB_OUTPUT
           90‚îÜ   elif [ "${{ inputs.job }}" = "run_trainer_and_fsdp_gpu" ]; then
           91‚îÜ     echo "folder_slices=[['trainer'], ['fsdp']]" >> $GITHUB_OUTPUT
           92‚îÜ     echo "slice_ids=[0, 1]" >> $GITHUB_OUTPUT
           93‚îÜ   fi
           94‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
          366‚îÜ run: cat ${{ inputs.working-directory-prefix }}/transformers/reports/${{ env.machine_type
               }}_run_torch_cuda_extensions_gpu_test_reports/failures_short.txt                         
                                                                               
  [36m[22m[24m  .github/workflows/huggingface_transformers__slack-report.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           40‚îÜ run: |
           41‚îÜ   echo "Setup status: ${{ inputs.setup_status }}"
           42‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
           78‚îÜ run: |
           79‚îÜ   pip install huggingface_hub
           80‚îÜ   pip install slack_sdk
           81‚îÜ   pip show slack_sdk
           82‚îÜ   if [ "${{ inputs.quantization_matrix }}" != "" ]; then
           83‚îÜ     python utils/notification_service.py "${{ inputs.quantization_matrix }}"
           84‚îÜ   else
           85‚îÜ     python utils/notification_service.py "${{ inputs.folder_slices }}"
           86‚îÜ   fi
           87‚îÜ
                                                                             
  [36m[22m[24m  .github/workflows/huggingface_transformers__ssh-runner.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           36‚îÜ run: |
           37‚îÜ   if [[ "${{ github.event.inputs.num_gpus }}" == "single" && "${{
               github.event.inputs.runner_type }}" == "t4" ]]; then             
           38‚îÜ     echo "RUNNER=aws-g4dn-4xlarge-cache" >> $GITHUB_ENV
           39‚îÜ   elif [[ "${{ github.event.inputs.num_gpus }}" == "multi" && "${{
               github.event.inputs.runner_type }}" == "t4" ]]; then              
           40‚îÜ     echo "RUNNER=aws-g4dn-12xlarge-cache" >> $GITHUB_ENV
           41‚îÜ   elif [[ "${{ github.event.inputs.num_gpus }}" == "single" && "${{
               github.event.inputs.runner_type }}" == "a10" ]]; then              
           42‚îÜ     echo "RUNNER=aws-g5-4xlarge-cache" >> $GITHUB_ENV
           43‚îÜ   elif [[ "${{ github.event.inputs.num_gpus }}" == "multi" && "${{
               github.event.inputs.runner_type }}" == "a10" ]]; then             
           44‚îÜ     echo "RUNNER=aws-g5-12xlarge-cache" >> $GITHUB_ENV
           45‚îÜ   else
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
                                                                               
  [36m[22m[24m  .github/workflows/langchain-ai_langchain___test_pydantic.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           46‚îÜ run: VIRTUAL_ENV=.venv uv pip install pydantic~=${{ inputs.pydantic-version }}
                                                                              
  [36m[22m[24m  .github/workflows/langchain-ai_langchain__run_notebooks.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           57‚îÜ run: |
           58‚îÜ   uv run python docs/scripts/prepare_notebooks_for_ci.py --comment-install-cells --working-
               directory ${{ github.event.inputs.working-directory || 'all' }}                            
           59‚îÜ
                                                                  
  [36m[22m[24m  .github/workflows/microsoft_TypeScript__lkg.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           24‚îÜ - run: |
           25‚îÜ     if [[ ! "${{ inputs.branch_name }}" =~ ^release- ]]; then
           26‚îÜ       echo "Branch name must start with 'release-'"
           27‚îÜ       exit 1
           28‚îÜ     fi
           29‚îÜ
                                                                                  
  [36m[22m[24m  .github/workflows/microsoft_TypeScript__new-release-branch.yaml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           66‚îÜ - run: |
           67‚îÜ     git checkout -b ${{ inputs.branch_name }}
           68‚îÜ     sed -i -e 's/"version": ".*"/"version": "${{ inputs.package_version }}"/g' package.json
           69‚îÜ     sed -i -e 's/const versionMajorMinor = ".*"/const versionMajorMinor = "${{
               inputs.core_major_minor }}"/g' src/compiler/corePublic.ts                     
           70‚îÜ     sed -i -e 's/const versionMajorMinor = ".*"/const versionMajorMinor = "${{
               inputs.core_major_minor }}"/g' tests/baselines/reference/api/typescript.d.ts  
           71‚îÜ     sed -i -e 's/const version\(: string\)\{0,1\} = .*;/const version = "${{
               inputs.package_version }}" as string;/g' src/compiler/corePublic.ts         
           72‚îÜ     npm ci
           73‚îÜ     npm install # update package-lock.json to ensure the version bump is included
           74‚îÜ     npx hereby LKG
           75‚îÜ     npm test
             [hid 10 additional lines, adjust with --max-lines-per-finding] 
                                                                           
  [36m[22m[24m  .github/workflows/microsoft_TypeScript__set-version.yaml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           71‚îÜ - run: |
           72‚îÜ     sed -i -e 's/"version": ".*"/"version": "${{ inputs.package_version }}"/g' package.json
           73‚îÜ     sed -i -e 's/const versionMajorMinor = ".*"/const versionMajorMinor = "${{
               inputs.core_major_minor }}"/g' src/compiler/corePublic.ts                     
           74‚îÜ     sed -i -e 's/const versionMajorMinor = ".*"/const versionMajorMinor = "${{
               inputs.core_major_minor }}"/g' tests/baselines/reference/api/typescript.d.ts  
           75‚îÜ     sed -i -e 's/const version\(: string\)\{0,1\} = .*;/const version = "${{
               inputs.package_version }}" as string;/g' src/compiler/corePublic.ts         
           76‚îÜ     npm ci
           77‚îÜ     npm install # update package-lock.json to ensure the version bump is included
           78‚îÜ     npx hereby LKG
           79‚îÜ     npm test
           80‚îÜ     git diff
             [hid 9 additional lines, adjust with --max-lines-per-finding] 
                                                                      
  [36m[22m[24m  .github/workflows/n8n-io_n8n__docker-build-push.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
          106‚îÜ run: |
          107‚îÜ   if [[ "${{ github.event_name }}" == "schedule" ]]; then
          108‚îÜ     echo "release_type=nightly" >> $GITHUB_OUTPUT
          109‚îÜ     echo "n8n_version=snapshot" >> $GITHUB_OUTPUT
          110‚îÜ     echo "push_enabled=true" >> $GITHUB_OUTPUT
          111‚îÜ   elif [[ "${{ github.event_name }}" == "workflow_call" ]]; then
          112‚îÜ     echo "release_type=${{ inputs.release_type }}" >> $GITHUB_OUTPUT
          113‚îÜ     echo "n8n_version=${{ inputs.n8n_version }}" >> $GITHUB_OUTPUT
          114‚îÜ     echo "push_enabled=${{ inputs.push_enabled }}" >> $GITHUB_OUTPUT
          115‚îÜ   elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
             [hid 25 additional lines, adjust with --max-lines-per-finding] 
                                                              
  [36m[22m[24m  .github/workflows/n8n-io_n8n__e2e-flaky.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           64‚îÜ run: pnpm run debug:flaky:e2e "${{ github.event.inputs.test_name }}" ${{
               github.event.inputs.burn_count }}                                       
                                                                 
  [36m[22m[24m  .github/workflows/n8n-io_n8n__e2e-reusable.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           64‚îÜ run: |
           65‚îÜ   if [ -n "${{ inputs.pr_number }}" ]; then
           66‚îÜ     echo "value=refs/pull/${{ inputs.pr_number }}/head" >> $GITHUB_OUTPUT
           67‚îÜ   else
           68‚îÜ     echo "value=${{ inputs.branch }}" >> $GITHUB_OUTPUT
           69‚îÜ   fi
                                                              
  [36m[22m[24m  .github/workflows/n8n-io_n8n__e2e-tests.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           38‚îÜ run: |
           39‚îÜ   [[ "${{github.event.inputs.start-url}}" != "" ]] && curl -v -X POST -d 'url=${{
               github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}' 
               ${{github.event.inputs.start-url}} || echo ""                                    
            ‚ãÆ‚îÜ----------------------------------------
           68‚îÜ run: |
           69‚îÜ   [[ "${{github.event.inputs.success-url}}" != "" ]] && curl -v
               ${{github.event.inputs.success-url}} || echo ""                
                                                                      
  [36m[22m[24m  .github/workflows/n8n-io_n8n__release-create-pr.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           59‚îÜ run: |
           60‚îÜ   git push -f origin refs/remotes/origin/${{ github.event.inputs.base-branch
               }}:refs/heads/release/${{ env.NEXT_RELEASE }}                               
           61‚îÜ
                                                                            
  [36m[22m[24m  .github/workflows/n8n-io_n8n__release-push-to-channel.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           30‚îÜ run: |
           31‚îÜ   input_version="${{ github.event.inputs.version }}"
           32‚îÜ   version_regex='^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'
           33‚îÜ
           34‚îÜ   if [[ "$input_version" =~ $version_regex ]]; then
           35‚îÜ     echo "Version format is valid: $input_version"
           36‚îÜ     echo "version=$input_version" >> $GITHUB_OUTPUT
           37‚îÜ   else
           38‚îÜ     echo "::error::Invalid version format provided: '$input_version'. Must match regex
               '$version_regex'."                                                                    
           39‚îÜ     exit 1
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
                                                                                 
  [36m[22m[24m  .github/workflows/n8n-io_n8n__security-trivy-scan-callable.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           28‚îÜ run: |
           29‚îÜ   docker pull ${{ inputs.image_ref }}
           30‚îÜ
                                                                                        
  [36m[22m[24m  .github/workflows/oracle_docker-images__build-and-push-dev-images.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           59‚îÜ run: |
           60‚îÜ   IFS=", " read -r -a ol_list <<< "${{ github.event.inputs.ol || env.ol}}"
           61‚îÜ   IFS=", " read -r -a lang_list <<< "${{ github.event.inputs.lang || env.lang}}"
           62‚îÜ   changes=$(mktemp)
           63‚îÜ   # workflow is only set in the workflow_dispatch event payload
           64‚îÜ   workflow="${{ github.event.workflow }}"
           65‚îÜ   if [[ -z ${workflow} ]]; then
           66‚îÜ     # Push event - retrieve list of changed files
           67‚îÜ     git diff --name-only '${{ github.event.before }}..${{ github.event.after }}' >
               "${changes}"                                                                      
           68‚îÜ     if grep -q build-and-push-dev-images.yml "${changes}"; then
             [hid 50 additional lines, adjust with --max-lines-per-finding] 
                                                                                         
  [36m[22m[24m  .github/workflows/tensorflow_tensorflow__release-branch-cherrypick.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           53‚îÜ run: |
           54‚îÜ     git config --global user.name "TensorFlow Release Automation"
           55‚îÜ     git config --global user.email "jenkins@tensorflow.org"
           56‚îÜ     git fetch origin master
           57‚îÜ     git cherry-pick ${{ github.event.inputs.git_commit }}
           58‚îÜ     echo "SHORTSHA=$(git log -1 ${{ github.event.inputs.git_commit }} --format="%h")" >>
               "$GITHUB_OUTPUT"                                                                        
           59‚îÜ     echo "TITLE=$(git log -1 ${{ github.event.inputs.git_commit }} --format="%s")" >>
               "$GITHUB_OUTPUT"                                                                     
                                                                       
  [36m[22m[24m  .github/workflows/vercel_next.js__build_reusable.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
          144‚îÜ - run: fnm use --install-if-missing ${{ inputs.nodeVersion || env.NODE_LTS_VERSION }}
            ‚ãÆ‚îÜ----------------------------------------
          145‚îÜ - run: fnm default ${{ inputs.nodeVersion || env.NODE_LTS_VERSION }}
            ‚ãÆ‚îÜ----------------------------------------
          205‚îÜ - run: pnpm dlx turbo@${TURBO_VERSION} run build-native-${{ inputs.rustBuildProfile }} -v
               --env-mode loose --remote-cache-timeout 90 --summarize -- --target ${{                   
               inputs.buildNativeTarget }}                                                              
            ‚ãÆ‚îÜ----------------------------------------
          248‚îÜ - run: ${{ inputs.afterBuild }}
            ‚ãÆ‚îÜ----------------------------------------
          273‚îÜ run: |
          274‚îÜ   # Add a `test.type` tag to distinguish between turbopack and next.js runs
          275‚îÜ   # Add a `nextjs.test_session.name` tag to help identify the job
          276‚îÜ   if [ -d ./test/test-junit-report ]; then
          277‚îÜ     pnpm dlx @datadog/datadog-ci@2.45.1 junit upload \
          278‚îÜ       --service nextjs \
          279‚îÜ       --tags test.type:nextjs \
          280‚îÜ       --tags test_session.name:"${{ inputs.stepName }}" \
          281‚îÜ       ./test/test-junit-report
          282‚îÜ   fi
             [hid 8 additional lines, adjust with --max-lines-per-finding] 
                                                                    
  [36m[22m[24m  .github/workflows/vercel_next.js__code_freeze.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           45‚îÜ - run: node ./scripts/code-freeze.js --type ${{ github.event.inputs.type }}
                                                                                   
  [36m[22m[24m  .github/workflows/vercel_next.js__integration_tests_reusable.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           62‚îÜ run: |
           63‚îÜ   printf 'e2e=[%s]\n' \
           64‚îÜ     "$(seq -s, 1 ${{ inputs.e2e_groups }})" | \
           65‚îÜ     tee -a "$GITHUB_OUTPUT"
           66‚îÜ   printf 'integration=[%s]\n' \
           67‚îÜ     "$(seq -s, 1 ${{ inputs.integration_groups }})" | \
           68‚îÜ     tee -a "$GITHUB_OUTPUT"
                                                                           
  [36m[22m[24m  .github/workflows/vercel_next.js__setup-nextjs-build.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           50‚îÜ run: |
           51‚îÜ   echo "NEXTJS_VERSION=${{ inputs.version != '' && inputs.version ||
               env.NEXJS_LATEST_VERSION }}" >> $GITHUB_ENV                         
           52‚îÜ
                                                                        
  [36m[22m[24m  .github/workflows/vercel_next.js__trigger_release.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
          108‚îÜ - run: node ./scripts/start-release.js --release-type ${{ github.event.inputs.releaseType
               || 'canary' }} --semver-type ${{ github.event.inputs.semverType }}                       
                                                                     
  [36m[22m[24m  .github/workflows/vercel_next.js__update_react.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           54‚îÜ run: pnpm sync-react --actor "${{ github.actor }}" --commit --create-pull --version "${{
               inputs.version }}"                                                                      
                                                             
  [36m[22m[24m  .github/workflows/yt-dlp_yt-dlp__build.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
          101‚îÜ run: |
          102‚îÜ   echo "origin=${{ inputs.origin == 'current repo' && github.repository || inputs.origin
               }}" | tee "$GITHUB_OUTPUT"                                                              
          103‚îÜ
            ‚ãÆ‚îÜ----------------------------------------
          119‚îÜ run: |
          120‚îÜ   python devscripts/update-version.py -c "${{ inputs.channel }}" -r "${{
               needs.process.outputs.origin }}" "${{ inputs.version }}"                
          121‚îÜ   python devscripts/update_changelog.py -vv
          122‚îÜ   python devscripts/make_lazy_extractors.py
            ‚ãÆ‚îÜ----------------------------------------
          213‚îÜ run: |
          214‚îÜ   cd repo
          215‚îÜ   python3.9 devscripts/install_deps.py -o --include build
          216‚îÜ   python3.9 devscripts/install_deps.py --include pyinstaller  # Cached versions may be out
               of date                                                                                   
          217‚îÜ   python3.9 devscripts/update-version.py -c "${{ inputs.channel }}" -r "${{
               needs.process.outputs.origin }}" "${{ inputs.version }}"                   
          218‚îÜ   python3.9 devscripts/make_lazy_extractors.py
          219‚îÜ   python3.9 -m bundle.pyinstaller
          220‚îÜ
          221‚îÜ   if ${{ vars.UPDATE_TO_VERIFICATION && 'true' || 'false' }}; then
          222‚îÜ     arch="${{ (matrix.architecture == 'armv7' && 'armv7l') || matrix.architecture }}"
             [hid 8 additional lines, adjust with --max-lines-per-finding] 
          301‚îÜ run: |
          302‚îÜ   python3 devscripts/update-version.py -c "${{ inputs.channel }}" -r "${{
               needs.process.outputs.origin }}" "${{ inputs.version }}"                 
          303‚îÜ   python3 devscripts/make_lazy_extractors.py
            ‚ãÆ‚îÜ----------------------------------------
          371‚îÜ run: |
          372‚îÜ   python3 devscripts/update-version.py -c "${{ inputs.channel }}" -r "${{
               needs.process.outputs.origin }}" "${{ inputs.version }}"                 
          373‚îÜ   python3 devscripts/make_lazy_extractors.py
            ‚ãÆ‚îÜ----------------------------------------
          414‚îÜ run: |
          415‚îÜ   python devscripts/update-version.py -c "${{ inputs.channel }}" -r "${{
               needs.process.outputs.origin }}" "${{ inputs.version }}"                
          416‚îÜ   python devscripts/make_lazy_extractors.py
            ‚ãÆ‚îÜ----------------------------------------
          463‚îÜ run: |
          464‚îÜ   python devscripts/update-version.py -c "${{ inputs.channel }}" -r "${{
               needs.process.outputs.origin }}" "${{ inputs.version }}"                
          465‚îÜ   python devscripts/make_lazy_extractors.py
                                                               
  [36m[22m[24m  .github/workflows/yt-dlp_yt-dlp__release.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           80‚îÜ run: |
           81‚îÜ   cat << EOF
           82‚îÜ   ::group::Inputs
           83‚îÜ   prerelease=${{ inputs.prerelease }}
           84‚îÜ   source=${{ inputs.source }}
           85‚îÜ   target=${{ inputs.target }}
           86‚îÜ   version=${{ inputs.version }}
           87‚îÜ   ::endgroup::
           88‚îÜ   EOF
           89‚îÜ   IFS='@' read -r source_repo source_tag <<<"${{ inputs.source }}"
             [hid 8 additional lines, adjust with --max-lines-per-finding] 
          105‚îÜ run: |
          106‚îÜ   # unholy bash monstrosity (sincere apologies)
          107‚îÜ   fallback_token () {
          108‚îÜ     if ${{ !secrets.ARCHIVE_REPO_TOKEN }}; then
          109‚îÜ       echo "::error::Repository access secret ${target_repo_token^^} not found"
          110‚îÜ       exit 1
          111‚îÜ     fi
          112‚îÜ     target_repo_token=ARCHIVE_REPO_TOKEN
          113‚îÜ     return 0
          114‚îÜ   }
             [hid 70 additional lines, adjust with --max-lines-per-finding] 
          385‚îÜ run: |
          386‚îÜ   title="${{ github.repository == 'yt-dlp/yt-dlp' && 'yt-dlp ' || '' }}"
          387‚îÜ   title+="${{ env.target_tag != env.version && format('{0} ', env.target_tag) || '' }}"
          388‚îÜ   gh release create \
          389‚îÜ     --notes-file ${{ inputs.prerelease && 'PRERELEASE_NOTES' || 'RELEASE_NOTES' }} \
          390‚îÜ     --target ${{ env.head_sha }} \
          391‚îÜ     --title "${title}${{ env.version }}" \
          392‚îÜ     ${{ inputs.prerelease && '--prerelease' || '' }} \
          393‚îÜ     ${{ env.target_tag }} \
          394‚îÜ     artifact/*
                                                                
  [36m[22m[24m  .github/workflows/ytdl-org_youtube-dl__ci.yml[0m
   ‚ùØ‚ùØ‚ù± yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           83‚îÜ run: |
           84‚îÜ   # Make a JSON Array from comma/space-separated string (no extra escaping)
           85‚îÜ   json_list() { \
           86‚îÜ     ret=""; IFS="${IFS},"; set -- $*; \
           87‚îÜ     for a in "$@"; do \
           88‚îÜ       ret=$(printf '%s"%s"' "${ret}${ret:+, }" "$a"); \
           89‚îÜ     done; \
           90‚îÜ     printf '[%s]' "$ret"; }
           91‚îÜ   tests="${{ inputs.test-set || env.test-set }}"
           92‚îÜ   [ $tests = both ] && tests="core download"
             [hid 12 additional lines, adjust with --max-lines-per-finding] 

